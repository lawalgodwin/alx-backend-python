#!/usr/bin/env bash

# A script that applys rolling updates strategy to Update the application without downtime

# Variables
DEPLOYMENT_FILE="blue_deployment.yaml"  # Path to your updated deployment file
NAMESPACE="default"  # Change if your namespace is different
HEALTH_CHECK_URL="http://messaging-app-service/api/"  # The URL to check the app's health
MAX_RETRIES=10  # Maximum retries for curl (for checking downtime)

# Apply the updated deployment file (with version 2.0)
echo "Applying the updated deployment with image version 2.0..."
kubectl apply -f $DEPLOYMENT_FILE

# Trigger the rolling update
echo "Rolling update triggered. Monitoring progress..."
kubectl rollout status deployment/messaging-app-blue -n $NAMESPACE

# Use curl to test if the app experiences downtime or disruption during the update
echo "Testing app availability during the rolling update..."

# Continuous curl requests to check for downtime (retrying on failure)
retry_count=0
while [ $retry_count -lt $MAX_RETRIES ]; do
  RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)

  if [[ "$RESPONSE" -eq 200 ]]; then
    echo "App is available. HTTP status code: $RESPONSE"
    break
  else
    echo "App is unavailable (HTTP status code: $RESPONSE). Retrying... ($((retry_count+1))/$MAX_RETRIES)"
    retry_count=$((retry_count+1))
    sleep 5  # Wait for 5 seconds before retrying
  fi
done

# Verify that the rolling update is complete
echo "Verifying that the rolling update is complete..."

# Check if all the pods are running and up-to-date
kubectl get pods -n $NAMESPACE -l app=messaging-app -o wide

# Check if the deployment status is up-to-date
kubectl rollout status deployment/messaging-app-blue -n $NAMESPACE

echo "Rolling update complete!"